// Mocks generated by Mockito 5.0.9 from annotations
// in storayge/test/features/cabinet/mock_classes/mock_app_cabinet/mock_app_cabinet.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:storayge/core/errors/failures.dart' as _i6;
import 'package:storayge/features/cabinet/data/datasources/cabinet_local_datasource.dart'
    as _i8;
import 'package:storayge/features/cabinet/data/datasources/cabinet_remote_datasource.dart'
    as _i9;
import 'package:storayge/features/cabinet/data/models/shelf_model.dart' as _i3;
import 'package:storayge/features/cabinet/domain/entities/shelf.dart' as _i7;
import 'package:storayge/features/cabinet/domain/repository/cabinet_repository.dart'
    as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeShelfModel extends _i1.Fake implements _i3.ShelfModel {}

class _FakeUnit extends _i1.Fake implements _i2.Unit {}

/// A class which mocks [CabinetRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCabinetRepository extends _i1.Mock implements _i4.CabinetRepository {
  MockCabinetRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.Shelf>> getShelf(
          {String? uid, String? shelfId}) =>
      (super.noSuchMethod(
              Invocation.method(#getShelf, [], {#uid: uid, #shelfId: shelfId}),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.Shelf>>.value(
                  _FakeEither<_i6.Failure, _i7.Shelf>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.Shelf>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>> storeShelf(
          {_i7.Shelf? shelf, String? uid}) =>
      (super.noSuchMethod(
              Invocation.method(#storeShelf, [], {#shelf: shelf, #uid: uid}),
              returnValue: Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
                  _FakeEither<_i6.Failure, _i2.Unit>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>);
}

/// A class which mocks [CabinetLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCabinetLocalDataSource extends _i1.Mock
    implements _i8.CabinetLocalDataSource {
  MockCabinetLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.ShelfModel> getShelfFromLocal({String? shelfId}) =>
      (super.noSuchMethod(
              Invocation.method(#getShelfFromLocal, [], {#shelfId: shelfId}),
              returnValue: Future<_i3.ShelfModel>.value(_FakeShelfModel()))
          as _i5.Future<_i3.ShelfModel>);
  @override
  _i5.Future<_i2.Unit> storeShelfInLocal({_i3.ShelfModel? shelfModel}) =>
      (super.noSuchMethod(
          Invocation.method(#storeShelfInLocal, [], {#shelfModel: shelfModel}),
          returnValue:
              Future<_i2.Unit>.value(_FakeUnit())) as _i5.Future<_i2.Unit>);
}

/// A class which mocks [CabinetRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCabinetRemoteDataSource extends _i1.Mock
    implements _i9.CabinetRemoteDataSource {
  MockCabinetRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.ShelfModel> getShelf({String? uid, String? shelfId}) =>
      (super.noSuchMethod(
              Invocation.method(#getShelf, [], {#uid: uid, #shelfId: shelfId}),
              returnValue: Future<_i3.ShelfModel>.value(_FakeShelfModel()))
          as _i5.Future<_i3.ShelfModel>);
  @override
  _i5.Future<_i2.Unit> storeShelfInRemote(
          {String? uid, _i3.ShelfModel? shelfModel}) =>
      (super.noSuchMethod(
          Invocation.method(
              #storeShelfInRemote, [], {#uid: uid, #shelfModel: shelfModel}),
          returnValue:
              Future<_i2.Unit>.value(_FakeUnit())) as _i5.Future<_i2.Unit>);
}
